[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "portfolio_management"
version = "0.1.0"
description = "Offline-first Python CLI for portfolio construction and backtesting"
requires-python = ">=3.10"
dependencies = [
    "pandas>=2.3,<3.0",
    "numpy>=2.0.0",
    "PyYAML>=6.0",
    "scipy>=1.3",
    "cvxpy>=1.1.19",
    "ecos>=2.0.14,<3.0.0",
    "empyrical-reloaded>=0.5.0",
    "plotly>=5.0.0,<6.0.0",
    "PyPortfolioOpt>=1.5.0",
    "riskparityportfolio>=0.2",
    "tqdm>=4.65.0",
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "black",
    "isort",
    "ruff",
    "pre-commit",
    "mypy",
    "pandas-stubs",
    "types-PyYAML",
    "pytest",
    "pytest-xdist",
    "mdformat",
    "gitlint",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.venv312
  | _build
  | buck-out
  | build
  | dist
  | data
  | archive
  | outputs
  | results
)/
'''

[tool.isort]
profile = "black"

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "RUF", "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "D200", "D201", "D202", "D204", "D205", "D206", "D207", "D208", "D209", "D210", "D211", "D212", "D214", "D215", "D300", "D301", "D400", "D401", "D402", "D403", "D404", "D405", "D406", "D407", "D408", "D409", "D410", "D411", "D412", "D413", "D414", "D415", "D416", "D417", "D418", "D419"]
ignore = [
    "E501",      # Line too long (handled by black)
    "TRY003",    # Avoid specifying long messages outside exception class (too verbose)
    "TID252",    # Prefer absolute imports (relative imports are fine in packages)
    "G004",      # Logging statement uses f-string (f-strings are more readable)
    "G201",      # Logging .exception vs .error with exc_info (both acceptable)
    "RET504",    # Unnecessary assignment before return (sometimes aids clarity)
    "RUF022",    # Unsorted __all__ (alphabetical not always logical)
    "TC002",     # Move third-party import into TYPE_CHECKING block (not always beneficial)
    "TC001",     # Move first-party import into TYPE_CHECKING block (not always beneficial)
    "TC003",     # Move standard library import into TYPE_CHECKING block (not always beneficial)
    "FBT001",    # Boolean positional arg (sometimes clearer than kwargs)
    "FBT002",    # Boolean default positional argument (sometimes clearer)
    "FBT003",    # Boolean positional value in call (sometimes clearer)
    "PD008",     # Use .loc instead of .at (both have valid uses)
    "PD010",     # .pivot vs .pivot_table (both have valid uses)
    "PD011",     # Use .to_numpy() instead of .values (values is fine for simple cases)
    "RUF059",    # Unused unpacked variable (sometimes unavoidable with APIs)
    "D101",      # Missing docstring in public class (tests don't need class docstrings)
    "D102",      # Missing docstring in public method (tests self-document)
    "D104",      # Missing docstring in public package (not always necessary)
    "D107",      # Missing docstring in __init__ (type hints sufficient for simple inits)
    "D401",      # First line imperative mood (not always natural)
    "PLR2004",   # Magic value comparison (context often makes it obvious)
    "PLC0415",   # Import outside top-level (sometimes needed to avoid circular deps)
    "PERF203",   # try-except in loop (sometimes necessary for error handling)
    "PGH003",    # Blanket type ignore (sometimes necessary for complex types)
    "S101",      # Use of assert (acceptable in type narrowing and tests)
    "S324",      # MD5 hash function (acceptable for non-security cache keys)
    "C901",      # Complex function (refactoring not always beneficial)
    "PLR0911",   # Too many returns (sometimes clearer than nested ifs)
    "PLR0912",   # Too many branches (sometimes unavoidable in business logic)
    "PLR0915",   # Too many statements (sometimes necessary for complete logic)
    "B007",      # Unused loop variable (sometimes needed for range)
    "RUF043",    # pytest.raises pattern (regex patterns are standard pytest)
]

[tool.ruff.lint.per-file-ignores]
"scripts/prepare_tradeable_data.py" = ["C901", "PLR0912", "PLR0915", "PLR0913", "TRY003", "TRY300", "E402", "TCH003", "D407"]
"scripts/run_backtest.py" = ["T201", "C901", "PLR0912", "PLR0915", "PLR0913", "TRY003", "DTZ", "PTH123", "FBT001", "ARG001", "D401", "BLE001", "PLC0415", "TRY300", "PERF401"]
"scripts/classify_assets.py" = ["D100", "TCH003"]
"create_test_fixtures.py" = ["D100", "PTH123", "PTH120"]
"profile_pre_commit.py" = ["D100", "PTH123", "S603", "S607"]
"benchmark_*.py" = ["T201", "NPY002", "FBT001", "FBT002", "PLC0415", "PLR2004", "BLE001", "D100"]
"corrected_backtest.py" = ["T201", "D100", "INP001"]
"example_*.py" = ["T201", "D100"]
"plot_*.py" = ["T201", "D100"]
"scripts/demo_*.py" = ["T201"]
"tests/**/*.py" = [
  "D103",
  "S101",
  "PLR2004",
  "PT006",
  "PT011",
  "PT018",
  "ARG001",
  "PLR0913",
  "S603",
  "FLY002",
  "PD901",
  "PD011",
  "TRY003",
  "SIM117",
  "SLF001",
  "D401",
  "PLC0415",
  "COM812",
  "TCH002",
  "TCH003",
  "ISC001",
  "T201",
  "PTH123",
  "NPY002",
  "F841",
  "TRY300",
  "N806",
  "C408",
  "B905",
]
"src/portfolio_management/assets/classification/classification.py" = [
  "TRY003",
  "COM812",
  "PERF203",
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR1714",
  "PLR2004",
  "SIM102",
  "UP037",
  "D102",
  "RUF100",
  "F821",
  "PD901",
]
"src/portfolio_management/classification.py" = [
  "TRY003",
  "COM812",
  "PERF203",
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR1714",
  "PLR2004",
  "SIM102",
  "UP037",
  "D102",
  "RUF100",
  "F821",
  "PD901",
]
"src/portfolio_management/assets/universes/universes.py" = [
  "TRY003",
  "TRY401",
  "TRY400",
  "COM812",
  "FBT001",
  "FBT002",
  "TCH003",
  "PTH123",
  "C901",
  "PLR0912",
  "PLR0915",
  "PD901",
]
"src/portfolio_management/universes.py" = [
  "TRY003",
  "TRY401",
  "TRY400",
  "COM812",
  "FBT001",
  "FBT002",
  "TCH003",
  "PTH123",
  "C901",
  "PLR0912",
  "PLR0915",
  "PD901",
]
"src/portfolio_management/returns.py" = ["D", "RUF002", "TCH001", "TRY003", "C901", "PD002", "PD901", "PLR2004", "COM812", "BLE001", "TRY400", "RET504"]
"src/portfolio_management/selection.py" = ["D", "TRY003", "G004", "PERF203", "PLR2004", "PLC0415", "PD901"]
"src/portfolio_management/utils.py" = ["D", "TCH003", "C901", "PLR0912", "PERF203", "G201", "TRY003", "PGH003"]
"src/portfolio_management/data/io/io.py" = ["PLR0913", "TCH003"]
"src/portfolio_management/data/analysis/analysis.py" = ["TCH003"]
"src/portfolio_management/data/cache.py" = ["TCH003"]
"tests/integration/*.py" = ["D"]
"tests/scripts/*.py" = ["D", "TCH003"]
"tests/test_classification.py" = ["D"]
"tests/test_returns.py" = ["D", "TCH003"]
"tests/test_selection.py" = ["D"]
"tests/test_universes.py" = ["D"]
"tests/core/test_utils.py" = ["D"]
"src/portfolio_management/backtest.py" = ["FBT001", "PLR0911", "PLR2004", "C901", "PLR0912", "PLR0915", "PLC0415"]
"src/portfolio_management/backtesting/engine/backtest.py" = [
  "TCH003",
  "PLR0911",
  "PLR2004",
  "C901",
  "PLR0912",
  "PLR0915",
]
"src/portfolio_management/backtesting/models.py" = [
  "TCH003",
]
"src/portfolio_management/portfolio/builder.py" = [
  "TCH003",
  "TID252",
  "TCH001",
  "UP007",
]
"src/portfolio_management/portfolio/models.py" = [
  "UP007",
]
"src/portfolio_management/portfolio/strategies/mean_variance.py" = [
  "SLF001",
]
"src/portfolio_management/filters/__init__.py" = ["D104"]
"src/portfolio_management/strategies/__init__.py" = ["D104"]
"src/portfolio_management/filters/selection.py" = ["TRY003", "G004", "PLR2004"]
"src/portfolio_management/strategies/matching.py" = ["PLC0415"]
"src/portfolio_management/visualization.py" = ["PD011", "PD010", "PD901"]
"tests/test_visualization.py" = ["NPY002"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
norecursedirs = ["data", "archive", ".git", "__pycache__", "*.egg-info"]
markers = [
  "integration: marks tests as integration tests",
  "slow: marks tests as slow",
]
addopts = "--strict-markers"

[tool.coverage.run]
branch = true
source = ["portfolio_management"]
omit = [
  "*/__pycache__/*",
  "*/tests/*",
  "*/test_*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
  "if __name__ == \"__main__\":",
]
