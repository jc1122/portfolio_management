"""Data models for return calculation.

This module defines the data structures used to hold the results of return
calculations. These models provide a standardized way to pass around related
return statistics.

Key Classes:
    - ReturnSummary: A dataclass to store summary statistics for a set of returns.

Usage Example:
    >>> import pandas as pd
    >>> from portfolio_management.analytics.returns.models import ReturnSummary
    >>>
    >>> mean_returns = pd.Series({"AAPL": 0.2, "MSFT": 0.15})
    >>> volatility = pd.Series({"AAPL": 0.25, "MSFT": 0.22})
    >>> correlation = pd.DataFrame({
    ...     "AAPL": {"AAPL": 1.0, "MSFT": 0.8},
    ...     "MSFT": {"AAPL": 0.8, "MSFT": 1.0}
    ... })
    >>> coverage = pd.Series({"AAPL": 0.98, "MSFT": 0.99})
    >>>
    >>> summary = ReturnSummary(
    ...     mean_returns=mean_returns,
    ...     volatility=volatility,
    ...     correlation=correlation,
    ...     coverage=coverage
    ... )
    >>> print(summary.mean_returns)
    AAPL    0.20
    MSFT    0.15
    dtype: float64
"""

from __future__ import annotations

from dataclasses import dataclass

import pandas as pd


@dataclass
class ReturnSummary:
    """Summary statistics produced alongside prepared returns.

    This dataclass acts as a container for key statistics derived from a
    returns matrix, typically generated by the `ReturnCalculator`. It bundles
    related data together for convenient access.

    Attributes:
        mean_returns (pd.Series): A Series of annualized mean returns for each asset.
        volatility (pd.Series): A Series of annualized volatility (standard
            deviation) for each asset.
        correlation (pd.DataFrame): A DataFrame representing the correlation
            matrix between all assets' returns.
        coverage (pd.Series): A Series indicating the proportion of non-missing
            return data for each asset over the calculation period.

    Example:
        >>> import pandas as pd
        >>>
        >>> summary = ReturnSummary(
        ...     mean_returns=pd.Series({"A": 0.1, "B": 0.12}),
        ...     volatility=pd.Series({"A": 0.2, "B": 0.25}),
        ...     correlation=pd.DataFrame({"A": [1.0, 0.5], "B": [0.5, 1.0]}, index=["A", "B"]),
        ...     coverage=pd.Series({"A": 1.0, "B": 0.98})
        ... )
        >>> print(f"Mean return for A: {summary.mean_returns['A']:.2f}")
        Mean return for A: 0.10
    """

    mean_returns: pd.Series
    volatility: pd.Series
    correlation: pd.DataFrame
    coverage: pd.Series